@page "/consumo/edit/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Editar Consumo</h3>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (consumo != null)
{
    <div class="row">
        <div class="col-sm-12">
            <label class="form-label">ID del Consumo:</label>
            <p>@consumo.Id</p>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12">
            <label class="form-label">IdDerechoAgua:</label>
            <input type="number" class="form-control" @bind="consumo.IdDerechoAgua" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12">
            <label class="form-label">Mora:</label>
            <input type="text" class="form-control" @bind="consumo.Mora" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12">
            <button class="btn btn-primary" @onclick="UpdateConsumo">Guardar</button>
            <button class="btn btn-secondary" @onclick="BackToList">Regresar</button>
        </div>
    </div>
}
else
{
    <p>Cargando...</p>
}

@code {
    [Parameter] public int id { get; set; }
    private Consumo? consumo = null; // Asegúrate de que sea privado
    private string error = string.Empty; // Inicializa como cadena vacía

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Realiza la petición para obtener el consumo por ID
            consumo = await Http.GetFromJsonAsync<Consumo>($"Consumo/{id}");

            // Verifica si no se encuentra el consumo
            if (consumo == null)
            {
                error = "No se pudo encontrar el consumo con el ID proporcionado.";
            }
        }
        catch (Exception ex)
        {
            // Captura el error y lo muestra en la interfaz
            error = $"Error al cargar el consumo: {ex.Message}";
        }
    }

    public async Task UpdateConsumo()
    {
        try
        {
            if (consumo == null)
            {
                error = "No se puede actualizar un consumo nulo.";
                return;
            }

            var resultado = await Http.PutAsJsonAsync($"Consumo/{consumo.Id}", consumo);
            if (resultado.IsSuccessStatusCode)
            {
                BackToList(); // Redirige al listado tras la actualización
            }
            else
            {
                error = "Error al actualizar el consumo.";
            }
        }
        catch (Exception ex)
        {
            error = $"Error al actualizar el consumo: {ex.Message}";
        }
    }

    private void BackToList()
    {
        // Navega de vuelta al listado de consumos
        NavManager.NavigateTo("/consumo/index");
    }
}
